# -*- coding: utf-8 -*-
"""Carros mais vendidos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j8TV9uM4VpRrZHnoRe2PPaYT8RlwtaZR
"""

!pip install pandas matplotlib streamlit

#Tentativa de baixar direto pelo kaggle.. mal funciona
import kagglehub

# Download ultima version
path = kagglehub.dataset_download("bourzamraid/global-car-make-and-model-list")

print("Path to dataset files:", path) #demora mas as vezes vai

# Vamos novamente de token
!chmod 600 ~/.kaggle/kaggle.json

# Baixar o amazon-stok Dataset do Kaggle usei o token/api
!kaggle datasets download -dbourzamraid/global-car-make-and-model-list

#preparar o zip
from zipfile import ZipFile
#extrair o zip
with ZipFile('global-car-make-and-model-list.zip', 'r') as zip_ref:
    zip_ref.extractall('global-car-make-and-model-list')

import pandas as pd
import json

# coloque arquivo JSON extra√≠do
file_path = "/content/global-car-make-and-model-list/vehicle models.json"

# Carregar o arquivo JSON
with open(file_path, 'r') as f:
    data_json = json.load(f)

# Exibir a estrutura do JSON
print(data_json[:3])  # Mostra os 3 primeiros registros

# Converter para DataFrame (se os dados estiverem estruturados em uma lista de dicion√°rios)
if isinstance(data_json, list):
    data = pd.DataFrame(data_json)
    print(data.head())
    print(data.info())
else:
    print("O JSON n√£o est√° no formato esperado. Verifique a estrutura.")

print(data.columns)

import pandas as pd
import json

# Carregar o arquivo JSON
file_path = "/content/global-car-make-and-model-list/vehicle models.json"
with open(file_path, 'r') as f:
    data_json = json.load(f)

# Transformar os dados em uma lista de dicion√°rios com Make e cada Modelo
expanded_data = []

for entry in data_json:
    make = entry['Make']
    for model in entry['Models']:
        expanded_data.append({'Make': make, 'Model': model})

# Criar DataFrame
car_df = pd.DataFrame(expanded_data)

# Exibir o DataFrame
print(car_df.head())

# Verificar os fabricantes √∫nicos no dataset
fabricantes = car_df['Make'].unique()
print(f"Fabricantes no dataset: {fabricantes}")
print(f"Total de fabricantes: {len(fabricantes)}")

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Carregar e processar os dados conforme acima
file_path = "/content/global-car-make-and-model-list/vehicle models.json"
with open(file_path, 'r') as f:
    data_json = json.load(f)

# T√≠tulo
st.title("Dashboard de Marcas e Modelos de Carros")

# Filtro de Fabricante
selected_make = st.selectbox("Escolha um Fabricante", car_df['Make'].unique())

# Filtrar DataFrame conforme o fabricante escolhido
filtered_df = car_df[car_df['Make'] == selected_make]

# Exibir dados filtrados
st.write(f"Modelos dispon√≠veis para {selected_make}:")
st.write(filtered_df)

# Gr√°fico de Contagem de Modelos por Fabricante
fig, ax = plt.subplots(figsize=(10, 6))
sns.countplot(data=car_df, x='Make', order=car_df['Make'].value_counts().index, ax=ax)
ax.set_title('Contagem de Modelos por Fabricante')
st.pyplot(fig)

# Gr√°fico de Modelos Mais Populares
fig, ax = plt.subplots(figsize=(10, 6))
sns.countplot(data=filtered_df, y='Model', ax=ax)
ax.set_title(f'Modelos Mais Populares de {selected_make}')
st.pyplot(fig)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import seaborn as sns
# import matplotlib.pyplot as plt
# import json
# 
# # Configura√ß√µes da p√°gina
# st.set_page_config(page_title="Dashboard de Carros", layout="wide")
# 
# # Fun√ß√£o para carregar e processar os dados
# @st.cache_data
# def load_data(json_file):
#     # Ler o arquivo JSON
#     with open(json_file, 'r') as f:
#         data_json = json.load(f)
# 
#     # Transformar os dados em um formato plano
#     expanded_data = []
#     for entry in data_json:
#         make = entry['Make']
#         for model in entry['Models']:
#             expanded_data.append({'Make': make, 'Model': model})
# 
#     return pd.DataFrame(expanded_data)
# 
# # Carregar os dados
# data_file = "/content/global-car-make-and-model-list/vehicle models.json"
# car_df = load_data(data_file)
# 
# # T√≠tulo
# st.title("üìä Dashboard de Marcas e Modelos de Carros")
# 
# # Configura√ß√µes gerais do tema
# sns.set_theme(style="whitegrid")
# 
# # Adicionando estat√≠sticas √† barra lateral
# st.sidebar.header("üìä Estat√≠sticas Gerais")
# st.sidebar.write(f"**Total de Fabricantes:** {car_df['Make'].nunique()}")
# st.sidebar.write(f"**Total de Modelos:** {len(car_df)}")
# 
# 
# # Filtro de fabricante
# st.sidebar.header("Filtros")
# selected_make = st.sidebar.selectbox("Escolha um Fabricante", options=car_df['Make'].unique(), index=0)
# 
# # Filtrar os dados com base no fabricante selecionado
# filtered_df = car_df[car_df['Make'] == selected_make]
# 
# # Exibir informa√ß√µes sobre o fabricante e seus modelos
# st.subheader(f"Modelos de carros do fabricante: **{selected_make}**")
# st.write(f"Total de modelos dispon√≠veis: **{len(filtered_df)}**")
# st.dataframe(filtered_df)
# 
# # Adicionar a descri√ß√£o do dashboard
# st.sidebar.markdown("""
# ## Sobre o Dashboard
# Este projeto visualiza dados de marcas e modelos de carros.
# Recursos:
# - Distribui√ß√£o de modelos por fabricante.
# - Visualiza√ß√£o interativa de modelos populares.
# - Filtros para refinar a an√°lise.
# """)
# 
# # Op√ß√£o de selecionar o n√∫mero de fabricantes no primeiro gr√°fico
# top_n_makes = st.sidebar.slider("Quantos fabricantes exibir?", min_value=5, max_value=50, value=20, step=5)
# 
# # Dashboard 1: Gr√°fico de contagem de modelos por fabricante
# st.subheader(f"Distribui√ß√£o de Modelos por Fabricante (Top {top_n_makes})")
# fig1, ax1 = plt.subplots(figsize=(10, 8))
# top_makes = car_df['Make'].value_counts().head(top_n_makes)
# sns.barplot(y=top_makes.index, x=top_makes.values, ax=ax1, palette="viridis")
# ax1.set_title(f"Top {top_n_makes} Fabricantes com Mais Modelos", fontsize=14)
# ax1.set_xlabel("Quantidade")
# ax1.set_ylabel("Fabricantes")
# st.pyplot(fig1)
# 
# # Dashboard 2: Gr√°fico de modelos mais populares do fabricante selecionado
# st.subheader(f"Modelos mais populares de {selected_make}")
# if not filtered_df.empty:
#     fig2, ax2 = plt.subplots(figsize=(10, 6))  # Tamanho ajustado
#     top_models = filtered_df['Model'].value_counts().head(10)  # n√∫mero do top que aparece
#     sns.barplot(y=top_models.index, x=top_models.values, ax=ax2, palette="viridis")
#     ax2.set_title(f"Top 10 Modelos de {selected_make}", fontsize=14)
#     ax2.set_xlabel("Frequ√™ncia")
#     ax2.set_ylabel("Modelos")
#     st.pyplot(fig2)
# 
#        # Bot√£o para baixar dados filtrados
#     st.download_button(
#         label="üì• Baixar Dados Filtrados",
#         data=filtered_df.to_csv(index=False),
#         file_name=f"{selected_make}_modelos.csv",
#         mime="text/csv",
#     )
# 
# else:
#     st.write("Nenhum modelo encontrado para o fabricante selecionado.")
# 
# 
# # Mensagem de rodap√©
# st.sidebar.markdown("Semin√°rio de An√°lise de Dados")
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app2.py
# import streamlit as st
# import pandas as pd
# import seaborn as sns
# import matplotlib.pyplot as plt
# import json
# import plotly.express as px
# 
# # Configura√ß√µes da p√°gina
# st.set_page_config(page_title="üöó Dashboard Interativo de Carros", layout="wide")
# 
# # Fun√ß√£o para carregar e processar os dados
# @st.cache_data
# def load_data(json_file):
#     # Ler o arquivo JSON
#     with open(json_file, 'r') as f:
#         data_json = json.load(f)
# 
#     # Transformar os dados em um formato plano
#     expanded_data = []
#     for entry in data_json:
#         make = entry['Make']
#         for model in entry['Models']:
#             expanded_data.append({'Make': make, 'Model': model})
# 
#     return pd.DataFrame(expanded_data)
# 
# # Carregar os dados
# data_file = "/content/global-car-make-and-model-list/vehicle models.json"
# car_df = load_data(data_file)
# 
# # T√≠tulo
# st.title("üöó Dashboard Interativo de Carros")
# 
# # Barra lateral com filtros e informa√ß√µes
# st.sidebar.header("Filtros")
# selected_make = st.sidebar.selectbox("Escolha um Fabricante", options=car_df['Make'].unique(), index=0)
# min_models = st.sidebar.slider("Modelos m√≠nimos por fabricante:", 0, 10, 50)
# filtered_makes = car_df['Make'].value_counts()
# filtered_makes = filtered_makes[filtered_makes >= min_models]
# 
# # Filtrar os dados com base no fabricante selecionado
# filtered_df = car_df[car_df['Make'] == selected_make]
# 
# # Adicionar a descri√ß√£o do dashboard
# st.sidebar.markdown("""
# ## Sobre o Dashboard
# Este projeto visualiza dados de marcas e modelos de carros.
# Recursos:
# - Distribui√ß√£o de modelos por fabricante.
# - Visualiza√ß√£o interativa de modelos populares.
# - Filtros para refinar a an√°lise.
# """)
# 
# # Exibir informa√ß√µes sobre o fabricante e seus modelos
# st.subheader(f"Modelos de carros do fabricante: **{selected_make}**")
# st.write(f"Total de modelos dispon√≠veis: **{len(filtered_df)}**")
# st.dataframe(filtered_df)
# 
# # Adicionando abas para organizar os gr√°ficos
# tab1, tab2 = st.tabs(["üìä Distribui√ß√£o por Fabricante", "üìà Modelos Populares"])
# 
# with tab1:
#     # Dashboard 1: Gr√°fico de contagem de modelos por fabricante
#     st.subheader("Distribui√ß√£o de Modelos por Fabricante")
#     fig1, ax1 = plt.subplots(figsize=(12, 6))
#     sns.countplot(data=car_df, y="Make", order=car_df['Make'].value_counts().index, ax=ax1)
#     ax1.set_title("N√∫mero de Modelos por Fabricante", fontsize=14)
#     ax1.set_xlabel("Quantidade")
#     ax1.set_ylabel("Fabricantes")
#     st.pyplot(fig1)
# 
# with tab2:
#     # Dashboard 2: Gr√°fico de modelos mais populares do fabricante selecionado
#     st.subheader(f"Modelos mais populares de {selected_make}")
#     fig2, ax2 = plt.subplots(figsize=(12, 6))
#     sns.countplot(data=filtered_df, y="Model", order=filtered_df['Model'].value_counts().index[:10], ax=ax2)
#     ax2.set_title(f"Top 10 Modelos de {selected_make}", fontsize=14)
#     ax2.set_xlabel("Frequ√™ncia")
#     ax2.set_ylabel("Modelos")
#     st.pyplot(fig2)
# 
#     # Exibir gr√°fico interativo com Plotly (se desejar adicionar interatividade)
#     st.subheader("Distribui√ß√£o Interativa de Modelos")
#     fig3 = px.bar(filtered_df['Model'].value_counts().reset_index(),
#                   x="index", y="Model", title=f"Modelos de {selected_make}")
#     st.plotly_chart(fig3)
# 
# # Exibir informa√ß√µes adicionais ou insights autom√°ticos
# if st.button("üìä Gerar Insights"):
#     top_make = car_df['Make'].value_counts().idxmax()
#     st.write(f"O fabricante com mais modelos √©: **{top_make}**, com **{car_df['Make'].value_counts().max()}** modelos!")
# 
# # Mensagem de rodap√©
# st.sidebar.markdown("Semin√°rio de Analise de Dados")
#

!pip install streamlit seaborn

!pip install --upgrade streamlit

#criando "senha" serve para os 2 app
import urllib
print("Password/Enpoint IP for localtunnel is:",\
urllib.request.urlopen('https://ipv4.icanhazip.com').\
read().decode('utf8').strip("\n"))

!streamlit run app.py & npx localtunnel --port 8501

!streamlit run app2.py & npx localtunnel --port 8501